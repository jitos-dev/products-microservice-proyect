#nombre para la aplicacion
spring.application.name=api-gateway
server.port=8081

#Si no queremos anotar con enablediscoveryclient ponemos esto
#spring.cloud.gateway.discovery.locator.enabled=true

#para añadir un id y diferenciarlo en eureka server
eureka.instance.instance-id=${spring.application.name}:${random.uuid}

#para utilizar el nuevo balanceador de carga de spring cloud deshabilitamos este
spring.cloud.loadbalancer.ribbon.enabled=false

#configuramos el ruteo dinamico (routes, predicates, filter)
#routes (lista de microservicios que se encuentran en la aplicacion)
#predicates (los controladores del microservicio)
spring.cloud.gateway.routes[0].id=product-microservice
spring.cloud.gateway.routes[0].uri.=lb://PRODUCT-MICROSERVICE
spring.cloud.gateway.routes[0].predicates[0].=Path=/api/products/**, /api/categories/**

spring.cloud.gateway.routes[1].id=booking-microservice
spring.cloud.gateway.routes[1].uri.=lb://BOOKING-MICROSERVICE
spring.cloud.gateway.routes[1].predicates[0].=Path=/api/mock/**

#spring.cloud.gateway.default-filters=TokenRelay

#configuraciones para keeycloak
#spring.security.oauth2.client.provider.keycloak.issuer-uri=http://localhost:9090/realms/mycompany-microservices-realm
#spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-id=spring-cloud-gateway-client
#spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-secret=yoYTv3PlS8QX0bJ1aBPU5bNd1mOi0so0
#spring.security.oauth2.client.registration.spring-cloud-gateway-client.client-name=myuser
#spring.security.oauth2.client.registration.spring-cloud-gateway-client.provider=keycloak
#spring.security.oauth2.client.registration.spring-cloud-gateway-client.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.spring-cloud-gateway-client.redirect-uri=http://localhost:8081/login/oauth2/code/spring-cloud-gateway-client
